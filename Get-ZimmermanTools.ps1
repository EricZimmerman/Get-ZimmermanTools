<#
.SYNOPSIS
    This script will discover and download all available programs from https://ericzimmerman.github.io and download them to $Dest. By default, ONLY .net 6 builds are downloaded.
.DESCRIPTION
    A file will also be created in $Dest that tracks the signature of each file, so rerunning the script will only download new versions. To redownload, remove lines from or delete the CSV file created under $Dest and rerun.
.PARAMETER Dest
    The path you want to save the programs to.
.PARAMETER NetVersion
    Which .net version to get. Default is ONLY net 6 builds as of 2023-05-18. Specify 4, 6, or 9 to only get tools built against that version of .net, or 0 for all.
.EXAMPLE
    C:\PS> Get-ZimmermanTools.ps1 -Dest c:\tools
    Downloads/extracts and saves details about programs to c:\tools directory.
.NOTES
    Author: Eric Zimmerman
    Date:   January 22, 2022    
#>

[CmdletBinding(DefaultParameterSetName = "NoProxy")]
Param
(
	[Parameter()]
	[string]$Dest = (Resolve-Path "."),
	#Where to save programs to
	[Parameter()]
	[ValidateSet('0', '4', '6', '9')]
	[int]$NetVersion = (9),
	#Which version of .net build to get
	#Specifies a proxy server for the request, rather than connecting directly to the Internet resource. Enter the URI of a network proxy server.
	[Parameter(Mandatory = $true,
			   ParameterSetName = "ProxyAlone")]
	[Parameter(Mandatory = $true,
			   ParameterSetName = "ProxyWithCreds")]
	[Parameter(Mandatory = $true,
			   ParameterSetName = "ProxyDefaultCreds")]
	[string]$Proxy,
	#Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter.
	#Type a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the Get-Credential cmdlet.
	#This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
	[Parameter(Mandatory = $true,
			   ParameterSetName = "ProxyWithCreds")]
	[pscredential]$ProxyCredential,
	#Indicates that the cmdlet uses the credentials of the current user to access the proxy server that is specified by the Proxy parameter.
	#This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and ProxyUseDefaultCredentials parameters in the same command.
	[Parameter(Mandatory = $true,
			   ParameterSetName = "ProxyDefaultCreds")]
	[switch]$ProxyUseDefaultCredentials
	
)


function Write-Color {
    <#
    .SYNOPSIS
    Write-Color is a wrapper around Write-Host delivering a lot of additional features for easier color options.

    .DESCRIPTION
    Write-Color is a wrapper around Write-Host delivering a lot of additional features for easier color options.

    It provides:
    - Easy manipulation of colors,
    - Logging output to file (log)
    - Nice formatting options out of the box.
    - Ability to use aliases for parameters

    .PARAMETER Text
    Text to display on screen and write to log file if specified.
    Accepts an array of strings.

    .PARAMETER Color
    Color of the text. Accepts an array of colors. If more than one color is specified it will loop through colors for each string.
    If there are more strings than colors it will start from the beginning.
    Available colors are: Black, DarkBlue, DarkGreen, DarkCyan, DarkRed, DarkMagenta, DarkYellow, Gray, DarkGray, Blue, Green, Cyan, Red, Magenta, Yellow, White

    .PARAMETER BackGroundColor
    Color of the background. Accepts an array of colors. If more than one color is specified it will loop through colors for each string.
    If there are more strings than colors it will start from the beginning.
    Available colors are: Black, DarkBlue, DarkGreen, DarkCyan, DarkRed, DarkMagenta, DarkYellow, Gray, DarkGray, Blue, Green, Cyan, Red, Magenta, Yellow, White

    .PARAMETER StartTab
    Number of tabs to add before text. Default is 0.

    .PARAMETER LinesBefore
    Number of empty lines before text. Default is 0.

    .PARAMETER LinesAfter
    Number of empty lines after text. Default is 0.

    .PARAMETER StartSpaces
    Number of spaces to add before text. Default is 0.

    .PARAMETER LogFile
    Path to log file. If not specified no log file will be created.

    .PARAMETER DateTimeFormat
    Custom date and time format string. Default is yyyy-MM-dd HH:mm:ss

    .PARAMETER LogTime
    If set to $true it will add time to log file. Default is $true.

    .PARAMETER LogRetry
    Number of retries to write to log file, in case it can't write to it for some reason, before skipping. Default is 2.

    .PARAMETER Encoding
    Encoding of the log file. Default is Unicode.

    .PARAMETER ShowTime
    Switch to add time to console output. Default is not set.

    .PARAMETER NoNewLine
    Switch to not add new line at the end of the output. Default is not set.

    .PARAMETER NoConsoleOutput
    Switch to not output to console. Default all output goes to console.

    .EXAMPLE
    Write-Color -Text "Red ", "Green ", "Yellow " -Color Red,Green,Yellow

    .EXAMPLE
    Write-Color -Text "This is text in Green ",
                      "followed by red ",
                      "and then we have Magenta... ",
                      "isn't it fun? ",
                      "Here goes DarkCyan" -Color Green,Red,Magenta,White,DarkCyan

    .EXAMPLE
    Write-Color -Text "This is text in Green ",
                      "followed by red ",
                      "and then we have Magenta... ",
                      "isn't it fun? ",
                      "Here goes DarkCyan" -Color Green,Red,Magenta,White,DarkCyan -StartTab 3 -LinesBefore 1 -LinesAfter 1

    .EXAMPLE
    Write-Color "1. ", "Option 1" -Color Yellow, Green
    Write-Color "2. ", "Option 2" -Color Yellow, Green
    Write-Color "3. ", "Option 3" -Color Yellow, Green
    Write-Color "4. ", "Option 4" -Color Yellow, Green
    Write-Color "9. ", "Press 9 to exit" -Color Yellow, Gray -LinesBefore 1

    .EXAMPLE
    Write-Color -LinesBefore 2 -Text "This little ","message is ", "written to log ", "file as well." `
                -Color Yellow, White, Green, Red, Red -LogFile "C:\testing.txt" -TimeFormat "yyyy-MM-dd HH:mm:ss"
    Write-Color -Text "This can get ","handy if ", "want to display things, and log actions to file ", "at the same time." `
                -Color Yellow, White, Green, Red, Red -LogFile "C:\testing.txt"

    .EXAMPLE
    Write-Color -T "My text", " is ", "all colorful" -C Yellow, Red, Green -B Green, Green, Yellow
    Write-Color -t "my text" -c yellow -b green
    Write-Color -text "my text" -c red

    .EXAMPLE
    Write-Color -Text "Testuję czy się ładnie zapisze, czy będą problemy" -Encoding unicode -LogFile 'C:\temp\testinggg.txt' -Color Red -NoConsoleOutput

    .NOTES
    Understanding Custom date and time format strings: https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings
    Project support: https://github.com/EvotecIT/PSWriteColor
    Original idea: Josh (https://stackoverflow.com/users/81769/josh)

    #>
    [alias('Write-Colour')]
    [CmdletBinding()]
    param (
        [alias ('T')] [String[]]$Text,
        [alias ('C', 'ForegroundColor', 'FGC')] [ConsoleColor[]]$Color = [ConsoleColor]::White,
        [alias ('B', 'BGC')] [ConsoleColor[]]$BackGroundColor = $null,
        [alias ('Indent')][int] $StartTab = 0,
        [int] $LinesBefore = 0,
        [int] $LinesAfter = 0,
        [int] $StartSpaces = 0,
        [alias ('L')] [string] $LogFile = '',
        [Alias('DateFormat', 'TimeFormat')][string] $DateTimeFormat = 'yyyy-MM-dd HH:mm:ss',
        [alias ('LogTimeStamp')][bool] $LogTime = $true,
        [int] $LogRetry = 2,
        [ValidateSet('unknown', 'string', 'unicode', 'bigendianunicode', 'utf8', 'utf7', 'utf32', 'ascii', 'default', 'oem')][string]$Encoding = 'Unicode',
        [switch] $ShowTime,
        [switch] $NoNewLine,
        [alias('HideConsole')][switch] $NoConsoleOutput
    )
    if (-not $NoConsoleOutput) {
        $DefaultColor = $Color[0]
        if ($null -ne $BackGroundColor -and $BackGroundColor.Count -ne $Color.Count) {
            Write-Error "Colors, BackGroundColors parameters count doesn't match. Terminated."
            return
        }
        if ($LinesBefore -ne 0) { for ($i = 0; $i -lt $LinesBefore; $i++) { Write-Host -Object "`n" -NoNewline } } # Add empty line before
        if ($StartTab -ne 0) { for ($i = 0; $i -lt $StartTab; $i++) { Write-Host -Object "`t" -NoNewline } }  # Add TABS before text
        if ($StartSpaces -ne 0) { for ($i = 0; $i -lt $StartSpaces; $i++) { Write-Host -Object ' ' -NoNewline } }  # Add SPACES before text
        if ($ShowTime) { Write-Host -Object "[$([datetime]::Now.ToString($DateTimeFormat))] " -NoNewline } # Add Time before output
        if ($Text.Count -ne 0) {
            if ($Color.Count -ge $Text.Count) {
                # the real deal coloring
                if ($null -eq $BackGroundColor) {
                    for ($i = 0; $i -lt $Text.Length; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $Color[$i] -NoNewline }
                } else {
                    for ($i = 0; $i -lt $Text.Length; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $Color[$i] -BackgroundColor $BackGroundColor[$i] -NoNewline }
                }
            } else {
                if ($null -eq $BackGroundColor) {
                    for ($i = 0; $i -lt $Color.Length ; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $Color[$i] -NoNewline }
                    for ($i = $Color.Length; $i -lt $Text.Length; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $DefaultColor -NoNewline }
                } else {
                    for ($i = 0; $i -lt $Color.Length ; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $Color[$i] -BackgroundColor $BackGroundColor[$i] -NoNewline }
                    for ($i = $Color.Length; $i -lt $Text.Length; $i++) { Write-Host -Object $Text[$i] -ForegroundColor $DefaultColor -BackgroundColor $BackGroundColor[0] -NoNewline }
                }
            }
        }
        if ($NoNewLine -eq $true) { Write-Host -NoNewline } else { Write-Host } # Support for no new line
        if ($LinesAfter -ne 0) { for ($i = 0; $i -lt $LinesAfter; $i++) { Write-Host -Object "`n" -NoNewline } }  # Add empty line after
    }
    if ($Text.Count -and $LogFile) {
        # Save to file
        $TextToFile = ""
        for ($i = 0; $i -lt $Text.Length; $i++) {
            $TextToFile += $Text[$i]
        }
        $Saved = $false
        $Retry = 0
        Do {
            $Retry++
            try {
                if ($LogTime) {
                    "[$([datetime]::Now.ToString($DateTimeFormat))] $TextToFile" | Out-File -FilePath $LogFile -Encoding $Encoding -Append -ErrorAction Stop -WhatIf:$false
                } else {
                    "$TextToFile" | Out-File -FilePath $LogFile -Encoding $Encoding -Append -ErrorAction Stop -WhatIf:$false
                }
                $Saved = $true
            } catch {
                if ($Saved -eq $false -and $Retry -eq $LogRetry) {
                    Write-Warning "Write-Color - Couldn't write to log file $($_.Exception.Message). Tried ($Retry/$LogRetry))"
                } else {
                    Write-Warning "Write-Color - Couldn't write to log file $($_.Exception.Message). Retrying... ($Retry/$LogRetry)"
                }
            }
        } Until ($Saved -eq $true -or $Retry -ge $LogRetry)
    }
}

#Setup proxy information for Invoke-WebRequest
[hashtable]$IWRProxyConfig = @{ }

if ($Proxy)
{
	$IWRProxyConfig.Add("Proxy", $Proxy)
}
if ($ProxyCredential)
{
	$IWRProxyConfig.Add("ProxyCredential", $ProxyCredential)
}
if ($ProxyUseDefaultCredentials)
{
	$IWRProxyConfig.Add("ProxyUseDefaultCredentials", $true)
}


Write-Color -LinesBefore 1 "This script will discover and download all available programs" -BackgroundColor Blue
Write-Color "from https://ericzimmerman.github.io and download them to $Dest" -BackgroundColor Blue -LinesAfter 1
Write-Color "A file will also be created in $Dest that tracks the signature of each file,"
Write-Color "so rerunning the script will only download new versions."
Write-Color -LinesBefore 1 -Text "To redownload, remove lines from or delete the CSV file created under $Dest and rerun. Enjoy!"

Write-Color -LinesBefore 1 -Text "Use -NetVersion to control which version of the software you get (4, 6, or 9). Default is 6. Use 0 to get all" -LinesAfter 1 -BackgroundColor Green

$TestColor = (Get-Host).ui.rawui.ForegroundColor
if ($TestColor -eq -1 -or $null -eq $TestColor)
{
	$defaultColor = [ConsoleColor]::Gray
}
else
{
	$defaultColor = $TestColor
}

$newInstall = $false

if (!(Test-Path -Path $Dest))
{
	Write-Color -Text "* ", "$Dest does not exist. Creating..." -Color Green, $defaultColor
	New-Item -ItemType directory -Path $Dest > $null
	
	$newInstall = $true
}

$URL = "https://raw.githubusercontent.com/EricZimmerman/ericzimmerman.github.io/master/index.md"

$WebKeyCollection = @()

$localDetailsFile = Join-Path $Dest -ChildPath "!!!RemoteFileDetails.csv"

if (Test-Path -Path $localDetailsFile)
{
	Write-Color -Text "* ", "Loading local details from '$Dest'..." -Color Green, $defaultColor
	$LocalKeyCollection = Import-Csv -Path $localDetailsFile
}

$toDownload = @()

#Get zips
$progressPreference = 'silentlyContinue'
$PageContent = (Invoke-WebRequest @IWRProxyConfig -Uri $URL -UseBasicParsing).Content
$progressPreference = 'Continue'

$regex = [regex] '(?i)\b(https)://[-A-Z0-9+&@#/%?=~_|$!:,.;]*[A-Z0-9+&@#/%=~_|$].(zip|txt)'
$matchdetails = $regex.Match($PageContent)


$uniqueUrlhash = @{ }


Write-Color -Text "* ", "Getting available programs..." -Color Green, $defaultColor
$progressPreference = 'silentlyContinue'
while ($matchdetails.Success)
{
	$newUrl = $matchdetails.Value.Replace('https://f001.backblazeb2.com/file/EricZimmermanTools/', 'https://download.ericzimmermanstools.com/')
	
	if ($newUrl.EndsWith('All.zip'))
	{
		$matchdetails = $matchdetails.NextMatch()
		continue
	}
	
	if ($newUrl.EndsWith('All_6.zip'))
	{
		$matchdetails = $matchdetails.NextMatch()
		continue
	}

	if ($newUrl.EndsWith('All_9.zip'))
	{
		$matchdetails = $matchdetails.NextMatch()
		continue
	}
	
	if ($uniqueUrlhash.Contains($newUrl))
	{
		$matchdetails = $matchdetails.NextMatch()
		continue
	}
	
	#Write-Host $newUrl
	
	$uniqueUrlhash.Add($newUrl, $newUrl)
	
	$isnet6 = $false
	$isnet9 = $false
	
	if ($NetVersion -eq 4)
	{
		if (!$newUrl.EndsWith("Get-ZimmermanTools.zip") -and ( $newUrl.Contains('/net6/') -or $newUrl.Contains('/net9/') ))
		{
			$matchdetails = $matchdetails.NextMatch()
			continue
		}
	}
	
	if ($NetVersion -eq 6)
	{
		if (!$newUrl.EndsWith("Get-ZimmermanTools.zip") -and !$newUrl.Contains('/net6/'))
		{
			$matchdetails = $matchdetails.NextMatch()
			continue
		}
	}

	if ($NetVersion -eq 9)
	{
		if (!$newUrl.EndsWith("Get-ZimmermanTools.zip") -and !$newUrl.Contains('/net9/'))
		{
			$matchdetails = $matchdetails.NextMatch()
			continue
		}
	}
	
	$isnet6 = $newUrl.Contains('/net6/')
	$isnet9 = $newUrl.Contains('/net9/')
	
	#Write-Host $newUrl
	
	$headers = $null
	try {
		$response = Invoke-WebRequest @IWRProxyConfig -Uri $newUrl -UseBasicParsing -Method Head -ErrorAction Stop
		$headers = $response.Headers
	} catch {
		if ($_.Exception.Response -ne $null) {
			$statusCode = $_.Exception.Response.StatusCode.value__
			Write-Color -Text "* ", "HTTP error $statusCode for URL: $newUrl" -Color Yellow, Red
			continue
		} else {
			Write-Color -Text "* ", "Network or connection error for URL: $newUrl. Error: $_" -Color Yellow, Red
			continue
		}
	}	

 	#Write-Host $headers
	
	#Check if net version is set and act accordingly
	#https://f001.backblazeb2.com/file/EricZimmermanTools/AmcacheParser.zip
	#https://f001.backblazeb2.com/file/EricZimmermanTools/net6/AmcacheParser_6.zip
	
	$newUrl = $matchdetails.Value.Replace('https://f001.backblazeb2.com/file/EricZimmermanTools', 'https://download.ericzimmermanstools.com/')

	#Write-Host 'THIS IS' + $newUrl

	$getUrl = $newUrl
	#$sha = $headers["x-bz-content-sha1"]
	$sha = $headers["ETag"]
	#$name = $headers["x-bz-file-name"]
	$name = ([uri]$getUrl).Segments[-1]
	
	if ($isnet6 -or $isnet9)
	{
		$name = Split-Path $name -leaf
	}
	
	$size = $headers["Content-Length"]
	
	$details = @{
		Name = [string]$name
		SHA1 = [string]$sha
		URL  = [string]$getUrl
		Size = [string]$size
		IsNet6 = [bool]$isnet6
		IsNet9 = [bool]$isnet9
	}
	
	$webKeyCollection += New-Object PSObject -Property $details
	
	$matchdetails = $matchdetails.NextMatch()
}
$progressPreference = 'Continue'

Foreach ($webKey in $webKeyCollection)
{
	if ($newInstall)
	{
		$toDownload += $webKey
		continue
	}
	
	$localFile = $LocalKeyCollection | Where-Object { $_.URL -eq $webKey.URL }
	
	if ($null -eq $localFile -or $localFile.SHA1 -ne $webKey.SHA1)
	{
		#Needs to be downloaded since SHA is different or it doesnt exist
		$toDownload += $webKey
	}
}

if ($toDownload.Count -eq 0)
{
	Write-Color -LinesBefore 1 -Text "* ", "All files current. Exiting." -Color Green, Blue -LinesAfter 1
	return
}



$downloadedOK = @()

$destFile = ""
$name = ""

$i = 0
$dlCount = $toDownload.Count
Write-Color -Text "* ", "Files to download: $dlCount" -Color Green, $defaultColor
foreach ($td in $toDownload)
{
	$p = [math]::round(($i/$toDownload.Count) * 100, 2)
	
	#Write-Host ($td | Format-Table | Out-String)
	
	$tempDest = $Dest
	
	try
	{
		$dUrl = $td.URL
		$size = $td.Size -as [long]
		$name = $td.Name
		$is6 = $td.IsNet6
		$is9 = $td.IsNet9
		
		if ($is6)
		{
			$tempDest = Join-Path $tempDest "net6"
			if (!(Test-Path -Path $tempDest))
			{
				Write-Color -Text "* ", "$tempDest does not exist. Creating..." -Color Green, $defaultColor
				New-Item -ItemType directory -Path $tempDest > $null
			}
		}

		if ($is9)
		{
			$tempDest = Join-Path $tempDest "net9"
			if (!(Test-Path -Path $tempDest))
			{
				Write-Color -Text "* ", "$tempDest does not exist. Creating..." -Color Green, $defaultColor
				New-Item -ItemType directory -Path $tempDest > $null
			}
		}
		
		Write-Progress -Activity "Updating programs...." -Status "$p% Complete" -PercentComplete $p -CurrentOperation "Downloading $name"
		$destFile = [IO.Path]::Combine($tempDest, $name)
		
		$progressPreference = 'silentlyContinue'
		Invoke-WebRequest @IWRProxyConfig -Uri $dUrl -OutFile $destFile -ErrorAction:Stop -UseBasicParsing
		
		$extraInfo = ""
		if ($is6)
		{
			$extraInfo = " (net 6)"
		}
		if ($is9)
		{
			$extraInfo = " (net 9)"
		}
		
		$sizeNice = '{0:N0}' -f $size
		
		Write-Color -Text "* ", "Downloaded $name (Size: $sizeNice)", $extraInfo -Color Green, Blue, Red
		
		if ($name.endswith("zip"))
		{
			
			Microsoft.PowerShell.Archive\Expand-Archive -Path $destFile -DestinationPath $tempDest -Force
		}
		
		$downloadedOK += $td
	}
	catch
	{
		$ErrorMessage = $_.Exception.Message
		Write-Color -Text "* ", "Error downloading $name ($ErrorMessage). Wait for the run to finish and try again by repeating the command" -Color Green, Red
	}
	finally
	{
		$progressPreference = 'Continue'
		if ($name.endswith("zip") -and (Test-Path -Path $destFile))
		{
			remove-item -Path $destFile -Force
		}
		
	}
	$i += 1
}

#Write-Host ($webKeyCollection | Format-Table | Out-String)

#Downloaded ok contains new stuff, but we need to account for existing stuff too
foreach ($webItems in $webKeyCollection)
{
	#Check what we have locally to see if it also contains what is in the web collection
	$localFile = $LocalKeyCollection | Where-Object { $_.SHA1 -eq $webItems.SHA1 }
	
	#if its not null, we have a local file match against what is on the website, so its ok
	
	if ($null -ne $localFile)
	{
		#consider it downloaded since SHAs match
		$downloadedOK += $webItems
	}
}

Write-Color -LinesBefore 1 -Text "* ", "Saving downloaded version information to $localDetailsFile" -Color Green, $defaultColor -LinesAfter 1

$downloadedOK | export-csv -Path $localDetailsFile

# SIG # Begin signature block
# MIIVuwYJKoZIhvcNAQcCoIIVrDCCFagCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCD1EIQ7PsKe8zEQ
# l9x8rzwTNV9q+0Fb5o8i/A4VoelC4KCCEfYwggVvMIIEV6ADAgECAhBI/JO0YFWU
# jTanyYqJ1pQWMA0GCSqGSIb3DQEBDAUAMHsxCzAJBgNVBAYTAkdCMRswGQYDVQQI
# DBJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAOBgNVBAcMB1NhbGZvcmQxGjAYBgNVBAoM
# EUNvbW9kbyBDQSBMaW1pdGVkMSEwHwYDVQQDDBhBQUEgQ2VydGlmaWNhdGUgU2Vy
# dmljZXMwHhcNMjEwNTI1MDAwMDAwWhcNMjgxMjMxMjM1OTU5WjBWMQswCQYDVQQG
# EwJHQjEYMBYGA1UEChMPU2VjdGlnbyBMaW1pdGVkMS0wKwYDVQQDEyRTZWN0aWdv
# IFB1YmxpYyBDb2RlIFNpZ25pbmcgUm9vdCBSNDYwggIiMA0GCSqGSIb3DQEBAQUA
# A4ICDwAwggIKAoICAQCN55QSIgQkdC7/FiMCkoq2rjaFrEfUI5ErPtx94jGgUW+s
# hJHjUoq14pbe0IdjJImK/+8Skzt9u7aKvb0Ffyeba2XTpQxpsbxJOZrxbW6q5KCD
# J9qaDStQ6Utbs7hkNqR+Sj2pcaths3OzPAsM79szV+W+NDfjlxtd/R8SPYIDdub7
# P2bSlDFp+m2zNKzBenjcklDyZMeqLQSrw2rq4C+np9xu1+j/2iGrQL+57g2extme
# me/G3h+pDHazJyCh1rr9gOcB0u/rgimVcI3/uxXP/tEPNqIuTzKQdEZrRzUTdwUz
# T2MuuC3hv2WnBGsY2HH6zAjybYmZELGt2z4s5KoYsMYHAXVn3m3pY2MeNn9pib6q
# RT5uWl+PoVvLnTCGMOgDs0DGDQ84zWeoU4j6uDBl+m/H5x2xg3RpPqzEaDux5mcz
# mrYI4IAFSEDu9oJkRqj1c7AGlfJsZZ+/VVscnFcax3hGfHCqlBuCF6yH6bbJDoEc
# QNYWFyn8XJwYK+pF9e+91WdPKF4F7pBMeufG9ND8+s0+MkYTIDaKBOq3qgdGnA2T
# OglmmVhcKaO5DKYwODzQRjY1fJy67sPV+Qp2+n4FG0DKkjXp1XrRtX8ArqmQqsV/
# AZwQsRb8zG4Y3G9i/qZQp7h7uJ0VP/4gDHXIIloTlRmQAOka1cKG8eOO7F/05QID
# AQABo4IBEjCCAQ4wHwYDVR0jBBgwFoAUoBEKIz6W8Qfs4q8p74Klf9AwpLQwHQYD
# VR0OBBYEFDLrkpr/NZZILyhAQnAgNpFcF4XmMA4GA1UdDwEB/wQEAwIBhjAPBgNV
# HRMBAf8EBTADAQH/MBMGA1UdJQQMMAoGCCsGAQUFBwMDMBsGA1UdIAQUMBIwBgYE
# VR0gADAIBgZngQwBBAEwQwYDVR0fBDwwOjA4oDagNIYyaHR0cDovL2NybC5jb21v
# ZG9jYS5jb20vQUFBQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmwwNAYIKwYBBQUHAQEE
# KDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5jb21vZG9jYS5jb20wDQYJKoZI
# hvcNAQEMBQADggEBABK/oe+LdJqYRLhpRrWrJAoMpIpnuDqBv0WKfVIHqI0fTiGF
# OaNrXi0ghr8QuK55O1PNtPvYRL4G2VxjZ9RAFodEhnIq1jIV9RKDwvnhXRFAZ/ZC
# J3LFI+ICOBpMIOLbAffNRk8monxmwFE2tokCVMf8WPtsAO7+mKYulaEMUykfb9gZ
# pk+e96wJ6l2CxouvgKe9gUhShDHaMuwV5KZMPWw5c9QLhTkg4IUaaOGnSDip0TYl
# d8GNGRbFiExmfS9jzpjoad+sPKhdnckcW67Y8y90z7h+9teDnRGWYpquRRPaf9xH
# +9/DUp/mBlXpnYzyOmJRvOwkDynUWICE5EV7WtgwggYaMIIEAqADAgECAhBiHW0M
# UgGeO5B5FSCJIRwKMA0GCSqGSIb3DQEBDAUAMFYxCzAJBgNVBAYTAkdCMRgwFgYD
# VQQKEw9TZWN0aWdvIExpbWl0ZWQxLTArBgNVBAMTJFNlY3RpZ28gUHVibGljIENv
# ZGUgU2lnbmluZyBSb290IFI0NjAeFw0yMTAzMjIwMDAwMDBaFw0zNjAzMjEyMzU5
# NTlaMFQxCzAJBgNVBAYTAkdCMRgwFgYDVQQKEw9TZWN0aWdvIExpbWl0ZWQxKzAp
# BgNVBAMTIlNlY3RpZ28gUHVibGljIENvZGUgU2lnbmluZyBDQSBSMzYwggGiMA0G
# CSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQCbK51T+jU/jmAGQ2rAz/V/9shTUxjI
# ztNsfvxYB5UXeWUzCxEeAEZGbEN4QMgCsJLZUKhWThj/yPqy0iSZhXkZ6Pg2A2NV
# DgFigOMYzB2OKhdqfWGVoYW3haT29PSTahYkwmMv0b/83nbeECbiMXhSOtbam+/3
# 6F09fy1tsB8je/RV0mIk8XL/tfCK6cPuYHE215wzrK0h1SWHTxPbPuYkRdkP05Zw
# mRmTnAO5/arnY83jeNzhP06ShdnRqtZlV59+8yv+KIhE5ILMqgOZYAENHNX9SJDm
# +qxp4VqpB3MV/h53yl41aHU5pledi9lCBbH9JeIkNFICiVHNkRmq4TpxtwfvjsUe
# dyz8rNyfQJy/aOs5b4s+ac7IH60B+Ja7TVM+EKv1WuTGwcLmoU3FpOFMbmPj8pz4
# 4MPZ1f9+YEQIQty/NQd/2yGgW+ufflcZ/ZE9o1M7a5Jnqf2i2/uMSWymR8r2oQBM
# dlyh2n5HirY4jKnFH/9gRvd+QOfdRrJZb1sCAwEAAaOCAWQwggFgMB8GA1UdIwQY
# MBaAFDLrkpr/NZZILyhAQnAgNpFcF4XmMB0GA1UdDgQWBBQPKssghyi47G9IritU
# pimqF6TNDDAOBgNVHQ8BAf8EBAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADATBgNV
# HSUEDDAKBggrBgEFBQcDAzAbBgNVHSAEFDASMAYGBFUdIAAwCAYGZ4EMAQQBMEsG
# A1UdHwREMEIwQKA+oDyGOmh0dHA6Ly9jcmwuc2VjdGlnby5jb20vU2VjdGlnb1B1
# YmxpY0NvZGVTaWduaW5nUm9vdFI0Ni5jcmwwewYIKwYBBQUHAQEEbzBtMEYGCCsG
# AQUFBzAChjpodHRwOi8vY3J0LnNlY3RpZ28uY29tL1NlY3RpZ29QdWJsaWNDb2Rl
# U2lnbmluZ1Jvb3RSNDYucDdjMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5zZWN0
# aWdvLmNvbTANBgkqhkiG9w0BAQwFAAOCAgEABv+C4XdjNm57oRUgmxP/BP6YdURh
# w1aVcdGRP4Wh60BAscjW4HL9hcpkOTz5jUug2oeunbYAowbFC2AKK+cMcXIBD0Zd
# OaWTsyNyBBsMLHqafvIhrCymlaS98+QpoBCyKppP0OcxYEdU0hpsaqBBIZOtBajj
# cw5+w/KeFvPYfLF/ldYpmlG+vd0xqlqd099iChnyIMvY5HexjO2AmtsbpVn0OhNc
# WbWDRF/3sBp6fWXhz7DcML4iTAWS+MVXeNLj1lJziVKEoroGs9Mlizg0bUMbOalO
# hOfCipnx8CaLZeVme5yELg09Jlo8BMe80jO37PU8ejfkP9/uPak7VLwELKxAMcJs
# zkyeiaerlphwoKx1uHRzNyE6bxuSKcutisqmKL5OTunAvtONEoteSiabkPVSZ2z7
# 6mKnzAfZxCl/3dq3dUNw4rg3sTCggkHSRqTqlLMS7gjrhTqBmzu1L90Y1KWN/Y5J
# KdGvspbOrTfOXyXvmPL6E52z1NZJ6ctuMFBQZH3pwWvqURR8AgQdULUvrxjUYbHH
# j95Ejza63zdrEcxWLDX6xWls/GDnVNueKjWUH3fTv1Y8Wdho698YADR7TNx8X8z2
# Bev6SivBBOHY+uqiirZtg0y9ShQoPzmCcn63Syatatvx157YK9hlcPmVoa1oDE5/
# L9Uo2bC5a4CH2RwwggZhMIIEyaADAgECAhEAjBvils2zwjIqORJ4bVTEYTANBgkq
# hkiG9w0BAQwFADBUMQswCQYDVQQGEwJHQjEYMBYGA1UEChMPU2VjdGlnbyBMaW1p
# dGVkMSswKQYDVQQDEyJTZWN0aWdvIFB1YmxpYyBDb2RlIFNpZ25pbmcgQ0EgUjM2
# MB4XDTIzMDMwMzAwMDAwMFoXDTI2MDMwMjIzNTk1OVowVzELMAkGA1UEBhMCVVMx
# EDAOBgNVBAgMB0luZGlhbmExGjAYBgNVBAoMEUVyaWMgUi4gWmltbWVybWFuMRow
# GAYDVQQDDBFFcmljIFIuIFppbW1lcm1hbjCCAiIwDQYJKoZIhvcNAQEBBQADggIP
# ADCCAgoCggIBANn/rNwsql8kzji1V5VB6wbTzlAWcO9OlGpYacDa5c51U8a3pGJz
# ss8jkbFghih927eHNYzUGHu3Qy7qCOROnZwKm5Da+N+yKyq1NX7LWwSfwpK6pa4S
# 7Y/LjgEDD6y/Vl9og+1F9mkTjDjP6rj8tMgKT6Pg+pfQPVL5oI4eV+5LbouPjSho
# gXgsf+UpN3CrX6MKDk40HEAsgura7fG5WzZXK0UruurloxTJZ2edlOFdU8KNswsk
# AncqZXRMhLkp89WE68e+Q+PybbVP+im+cHZWqDYAb4mu0cYLiCQxQUPGJ6AB+O9M
# kNAi9pO+qtZ5N+5ReNXENE9jokO/PDM7/tDVbODfZlHTgPecn2Hhhu+LiikrCPPd
# +5KFDU9kgaZ8N/L6qt2omNgqF3BXCo08beDiMfcs8veilCjWlzN8BTHrjhKctslu
# 0thGSqdQSOD6W8WawLxYlPMP4Fp7QEmHvJTYWQCdv0c6/HwMiDUGOZ2RT2i1g9Ck
# K7RSEh7shuLo1iW8OTyQX+Ecud7NpIQ3i2mMLcZZsqGF9erFxZrcD0TFqgX4peyH
# Y8Ig+5BYXY/w3VI9sYPWpH3kRwhqYMi0If9U+lfLUu3yoeKtIy6yH7NNnBAkOpE0
# k5K1ydHwFHH8O2QK9QslhUWIrkDK0etGPQfRqu349OtE/ddh4ySZOyklAgMBAAGj
# ggGpMIIBpTAfBgNVHSMEGDAWgBQPKssghyi47G9IritUpimqF6TNDDAdBgNVHQ4E
# FgQUOKRo/KEN0+hPPe2Rb2aIduqumqcwDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB
# /wQCMAAwEwYDVR0lBAwwCgYIKwYBBQUHAwMwSgYDVR0gBEMwQTA1BgwrBgEEAbIx
# AQIBAwIwJTAjBggrBgEFBQcCARYXaHR0cHM6Ly9zZWN0aWdvLmNvbS9DUFMwCAYG
# Z4EMAQQBMEkGA1UdHwRCMEAwPqA8oDqGOGh0dHA6Ly9jcmwuc2VjdGlnby5jb20v
# U2VjdGlnb1B1YmxpY0NvZGVTaWduaW5nQ0FSMzYuY3JsMHkGCCsGAQUFBwEBBG0w
# azBEBggrBgEFBQcwAoY4aHR0cDovL2NydC5zZWN0aWdvLmNvbS9TZWN0aWdvUHVi
# bGljQ29kZVNpZ25pbmdDQVIzNi5jcnQwIwYIKwYBBQUHMAGGF2h0dHA6Ly9vY3Nw
# LnNlY3RpZ28uY29tMB4GA1UdEQQXMBWBE2VyaWNAemltdGVjaDRuNi5jb20wDQYJ
# KoZIhvcNAQEMBQADggGBAIeSKPPdudG4ADR2jSIzrrBQJIjnUr+FN0Zij4+rKmEW
# MwoxLkqMwsn1T+a06E2c2+IFuasbNhsUhe+SssC04DntS2Mk48SY/E52LD0gGJNW
# UzfgFej9e8AYaZa3y8oFL4NmBuhXJcc2yhJVRObJ84USi4vmj1JmbebTDWS6sEq8
# yRdGoerMW++GP3SZvGKo25bYr1QKtdOLaMVUp6c3ILUyfiPUGsiPR9JWhmMqe/FX
# 3/6YFp+A01nxLqV6ya7+by+TBBLeKd6OUqflzmBV/i2eKvk+DIj1uRvesszQ/DbK
# zaLvls9+KUDLEUk80GjQ/PK0Y5oW+9gTGQ9ct/OIGATzsXGRL38SZJE0L3vuEUny
# lMyK1MQxmPj95DCncIGKbihZMBsjxi89K1rWU5Ka4rN6mCXDh2+RboTac90IwpGL
# dKuBRalIpkCXYY4FQ44SuEmdZx8zlm2Kfcg1k96mGFPOtvFpZtJzqpqWVUlcG1Sa
# SzntLunzWbjPdE9x/AXPwjGCAxswggMXAgEBMGkwVDELMAkGA1UEBhMCR0IxGDAW
# BgNVBAoTD1NlY3RpZ28gTGltaXRlZDErMCkGA1UEAxMiU2VjdGlnbyBQdWJsaWMg
# Q29kZSBTaWduaW5nIENBIFIzNgIRAIwb4pbNs8IyKjkSeG1UxGEwDQYJYIZIAWUD
# BAIBBQCggYQwGAYKKwYBBAGCNwIBDDEKMAigAoAAoQKAADAZBgkqhkiG9w0BCQMx
# DAYKKwYBBAGCNwIBBDAcBgorBgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAvBgkq
# hkiG9w0BCQQxIgQg57vhJ/xlF9FTUHIlHDVwkcaIyAYMg8e3IqoPTmt6dg8wDQYJ
# KoZIhvcNAQEBBQAEggIAiTYtFnJ27y8N3jqyTlKEcF6SZY8RpyHyvsfFiVJDhx7D
# DQrEnYkzpQajSLi5Pz7Yjc0Ypg2IUfIywTtsVOCNKcVwVrYF/+CxihnHfkjPA6ao
# CeR+jCprn0aA8yWGKBl5giYpeQJG9QvY6ta5jnavdtbMg4xk7+eOfyITxbXng43W
# CNqqYOY+wfsqXw23mWe0w5Ndz2yjZH4/F1W27vO/sxVQcG+p5IW8/PePYEU3T7tU
# zsM9wZ4JgyejeiNFwaQg+B7A3SzyF6vjI1FKhcZlro2gEUMDUrfKnYB9RRMDulmZ
# zKIwO3PC0rj6pdif8MaskXa/3n+T1/cKU5mtLGUEcpHzU6lPCjwQC00SD5zCgWvb
# Elb/ALq8pIqp782QfRg/imaDWWcrUDlRYcqVIuywwDP0St4IOcF3N+/rPd4xdJeC
# K6zSVL/gOS4NffFVdWxneAnnCeTrcIYvyTNqyDEeQkFMHKOi9WgCiJHg53siojEV
# 0eyceAmwOsQMEuvksmXG31h0EnXn3t+vBQCyBorOzZbGs0PKODIWD6YPDAxiKqin
# +7aADRmzLmwAb9rpPnkkFHqjm2+VIrn/xjWRfi9wnELdK8uYaM2PMI4oNX1PxLYD
# LIg1vZ2omiCan54DozNSms0VTZ472n2ZosB/HNg6RpRhVaDZ0dnZRJY6Ip1FU1I=
# SIG # End signature block
